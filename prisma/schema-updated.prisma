// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  nom         String
  prenom      String
  entreprise  String?
  siret       String?
  telephone   String?
  adresse     String?
  codePostal  String?
  ville       String?
  pays        String   @default("France")
  isPremium   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  contacts    Contact[]
  quotes      Quote[]
  services    Service[]
  
  @@map("users")
}

enum ContactStatus {
  CLIENT_ACTIF
  PROSPECT_CHAUD
  PROSPECT_TIEDE
  PROSPECT_FROID
  INACTIF
  
  @@map("contact_status")
}

model Contact {
  id                     String        @id @default(cuid())
  userId                 String
  nom                    String
  prenom                 String
  email                  String
  telephone              String?
  entreprise             String?
  poste                  String?
  adresse                String?
  codePostal             String?
  ville                  String?
  pays                   String        @default("France")
  statut                 ContactStatus @default(PROSPECT_FROID)
  scoreValeur            Float         @default(0)
  chiffresAffairesTotal  Float         @default(0)
  tauxConversion         Float         @default(0)
  panierMoyen            Float         @default(0)
  derniereInteraction    DateTime?
  dernierAchat           DateTime?
  notes                  String?
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  
  // Relations
  user                   User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  quotes                 Quote[]
  interactions           Interaction[]
  
  @@map("contacts")
}

enum QuoteStatus {
  BROUILLON
  ENVOYE
  VU
  ACCEPTE
  REFUSE
  EXPIRE
  
  @@map("quote_status")
}

model Quote {
  id              String      @id @default(cuid())
  userId          String
  contactId       String
  numero          String      @unique
  objet           String
  statut          QuoteStatus @default(BROUILLON)
  dateCreation    DateTime    @default(now())
  dateValidite    DateTime
  dateEnvoi       DateTime?
  dateAcceptation DateTime?
  dateConsultation DateTime?  // Nouveau champ pour la date de consultation reelle
  sousTotal       Float       @default(0)
  tva             Float       @default(0)
  total           Float       @default(0)
  conditions      String?
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  contact         Contact        @relation(fields: [contactId], references: [id], onDelete: Cascade)
  items           QuoteItem[]
  emailTracking   EmailTracking[]
  
  @@map("quotes")
}

model QuoteItem {
  id            String  @id @default(cuid())
  quoteId       String
  serviceId     String?
  designation   String
  description   String?
  quantite      Float
  prixUnitaire  Float
  total         Float
  ordre         Int
  
  // Relations
  quote         Quote   @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  service       Service? @relation(fields: [serviceId], references: [id], onDelete: SetNull)
  
  @@map("quote_items")
}

model Service {
  id           String      @id @default(cuid())
  userId       String
  nom          String
  description  String?
  prixUnitaire Float
  unite        String
  categorie    String?
  actif        Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  // Relations
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  quoteItems   QuoteItem[]
  
  @@map("services")
}

enum InteractionType {
  EMAIL
  TELEPHONE
  REUNION
  DEVIS
  COMMANDE
  AUTRE
  
  @@map("interaction_type")
}

model Interaction {
  id          String          @id @default(cuid())
  contactId   String
  type        InteractionType
  objet       String?
  description String?
  date        DateTime        @default(now())
  createdAt   DateTime        @default(now())
  
  // Relations
  contact     Contact         @relation(fields: [contactId], references: [id], onDelete: Cascade)
  
  @@map("interactions")
}

model EmailTracking {
  id                String    @id @default(cuid())
  quoteId           String
  email             String
  ouvert            Boolean   @default(false)
  dateOuverture     DateTime?
  nombreOuvertures  Int       @default(0)
  clique            Boolean   @default(false)
  dateClique        DateTime?
  nombreCliques     Int       @default(0)
  
  // Nouveaux champs pour la detection des faux positifs
  derniereActivite  DateTime?
  userAgent         String?
  adresseIP         String?
  scoreConfiance    Int       @default(0)  // Score de 0 a 100
  estBot            Boolean   @default(false)
  estPrechargement  Boolean   @default(false)
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  quote             Quote     @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  
  @@unique([quoteId, email])
  @@map("email_tracking")
}